{"version":3,"sources":["components/service/api.js","components/pages/defaultPage.js","components/pages/forecastPage.js","components/pages/mainPage.js","components/app/app.js","components/app/index.js","index.js"],"names":["ApiKey","key","base","DefaultPage","days","months","weather","weatherForSomeDays","fetchDate","changeCurrentCity","e","localStorage","setItem","target","value","className","city","name","map","date","i","getDay","getDate","getMonth","getFullYear","Math","round","list","main","temp","id","onClick","ForecastPage","api","MainPage","useState","query","setQuery","Days","setDays","setWeather","setWeatherForSomeDays","isShown","setIsShown","inputRef","useRef","fetch","then","res","json","catch","console","log","useEffect","localStorageCity","getItem","setDate","copyWeatherForSomeDays","currentDay","Date","push","Object","keys","type","placeholder","onChange","onKeyPress","event","current","ref","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37f47bd0.chunk.js","sourcesContent":["\r\nfunction ApiKey(){\r\n    const api = {\r\n        key: \"78200f069a336da62465d4f75f7847aa\",\r\n        base: \"https://api.openweathermap.org/data/2.5/\"\r\n    };\r\n\r\n    return api;\r\n}\r\nexport default ApiKey;","import React from 'react';\r\n\r\n\r\nconst DefaultPage = ({days, months, weather, weatherForSomeDays, fetchDate}) => {\r\n    const defaultCities = ['Minsk', 'Moscow', 'Bratislava'];\r\n\r\n\r\n    const changeCurrentCity = (e) => {\r\n        localStorage.setItem('city', e.target.value);\r\n        fetchDate(e.target.value);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"location\">\r\n                {weather.city.name} \r\n            </div>\r\n            <div className=\"main-location\">\r\n                {weatherForSomeDays.map((date, i )=> \r\n                    <div key={i}>\r\n                    <div className=\"location-box\"> \r\n                        <div className=\"date\">{`\r\n                        ${days[date.getDay()]}\r\n                        ${date.getDate()}\r\n                        ${months[date.getMonth()]}\r\n                        ${date.getFullYear()}`\r\n                        }</div>\r\n                        </div>\r\n                        <div className=\"weather-box\">\r\n                        <div className=\"temperature\">\r\n                            {Math.round(weather?.list[i]?.main?.temp)}°c\r\n                        </div>\r\n                        <div className=\"weather\">{weather?.list[i]?.weather[0]?.main}</div>\r\n                    </div>\r\n                </div>\r\n                )} \r\n            </div>\r\n            <div className= \"btn-box\">\r\n            {defaultCities.map((city, id) => \r\n                <button key={id} value={city} className=\"btn\" onClick={changeCurrentCity}>\r\n                    {city}\r\n                </button>\r\n            )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DefaultPage;","import React from 'react';\r\n\r\n\r\n\r\nconst ForecastPage = ({days, months, weather, weatherForSomeDays}) => {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"location\">\r\n                {weather.city.name} \r\n            </div>\r\n            <div className=\"main-location\">\r\n                {weatherForSomeDays.map((date, i )=> \r\n                    <div key={i}>\r\n                    <div className=\"location-box\">\r\n                        <div className=\"date\">{`\r\n                        ${days[date.getDay()]}\r\n                        ${date.getDate()}\r\n                        ${months[date.getMonth()]}\r\n                        ${date.getFullYear()}`\r\n                        }</div>\r\n                        </div>\r\n                        <div className=\"weather-box\">\r\n                        <div className=\"temperature\">\r\n                            {Math.round(weather.list[i].main.temp)}°c\r\n                        </div>\r\n                        <div className=\"weather\">{weather.list[i].weather[0].main}</div>\r\n                    </div>\r\n                </div>\r\n                )} \r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForecastPage;","import React, { useState, useEffect,useRef } from 'react';\r\nimport ApiKey from '../service/api';\r\n\r\n\r\nimport DefaultPage from './defaultPage';\r\nimport  ForecastPage  from './forecastPage';\r\n\r\nconst api = ApiKey();\r\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\nlet days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n\r\n\r\nfunction MainPage(){\r\n  const defaultCity = 'Minsk';\r\n\r\n  let [query, setQuery] = useState(defaultCity);\r\n\r\n  let [Days, setDays] = useState(4);\r\n\r\n  const [weather, setWeather] = useState({});\r\n\r\n  const [weatherForSomeDays, setWeatherForSomeDays] = useState([]); \r\n\r\n  const [isShown, setIsShown] = useState(false);\r\n\r\n  const inputRef = useRef(null);\r\n\r\n\r\n  const resetWeather = (result) => {\r\n    setWeather(result);\r\n  }\r\n\r\n  const fetchDate = (city)  => {\r\n    fetch(`${api.base}forecast?q=${city}&units=metric&cnt=${Days}&APPID=${api.key}`)\r\n    .then(res => res.json())\r\n    .then(res => resetWeather(res))\r\n    .catch(res => console.log(\"Error\"))\r\n  }\r\n\r\n  useEffect( () => {\r\n    const localStorageCity = localStorage.getItem('city');\r\n\r\n    if(localStorageCity){\r\n      query = localStorageCity;\r\n    }else{\r\n      localStorage.setItem('city', query)\r\n    }\r\n\r\n    fetchDate(query);\r\n    setDate();\r\n   \r\n  }, [Days]);\r\n\r\n  \r\n  const setDate = () => {\r\n    const copyWeatherForSomeDays = [];\r\n\r\n    const currentDay = new Date();\r\n\r\n    for(let i = 0; i < Days; i++) {\r\n    copyWeatherForSomeDays.push(new Date(currentDay.getFullYear(), currentDay.getMonth(), currentDay.getDate() + i))\r\n    }\r\n    setWeatherForSomeDays(copyWeatherForSomeDays)\r\n  }\r\n\r\n\r\n\r\n const switchDay = () => {\r\n    setIsShown(!isShown)\r\n    if(!isShown){\r\n      setDays(4)\r\n    }else{\r\n      setDays(10)\r\n    }\r\n }\r\n \r\n const search = event => {\r\n\r\n   if(event.key === \"Enter\"){\r\n\r\n    fetchDate(query, 4);\r\n\r\n    if(inputRef.current.value){\r\n      localStorage.setItem('city',inputRef.current.value);\r\n      inputRef.current.value = '';\r\n     }\r\n   }\r\n\r\n }\r\n\r\n return (\r\n    <div>\r\n      <div className={(Object.keys(weather) != 0) ? ((weather.list[0].main.temp > 16) ? 'app warm' : 'app') : 'app'}>\r\n        <main>\r\n          <div className=\"search-box\">\r\n            <input \r\n              type=\"text\"\r\n              className=\"search-bar\"\r\n              placeholder=\"Search...\"\r\n              onChange={e => setQuery(e.target.value)}\r\n              onKeyPress={search}\r\n              ref={inputRef}\r\n            />\r\n          <button className=\"btn btn-b\" onClick={switchDay}>{!isShown ? \"Forecast for 10 days\" : \"Forecast for 4 days \"}</button>\r\n          </div>\r\n          {Object.keys(weather) != 0 && (\r\n            <div>\r\n              {!isShown && (\r\n                <DefaultPage\r\n                  days={days} \r\n                  months={months} \r\n                  weather={weather} \r\n                  weatherForSomeDays={weatherForSomeDays} \r\n                  fetchDate={fetchDate}/>\r\n              )}\r\n              {isShown && (\r\n                <ForecastPage days={days} months={months} weather={weather} weatherForSomeDays={weatherForSomeDays}/>\r\n              )}\r\n            </div>\r\n          )}\r\n        </main> \r\n      </div>\r\n        \r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\n\nimport MainPage from '../pages/mainPage';\n\nimport './app.scss';\n\n\n\n\nfunction App() {\n \n  return (\n    <MainPage/>\n  );\n}\n\nexport default App;\n\n\n","import App from './app';\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app';\n\n\nReactDOM.render(\n\n    <App />\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}